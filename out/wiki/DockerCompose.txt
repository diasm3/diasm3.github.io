1:"$Sreact.fragment"
2:I[84551,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
3:I[44098,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
4:I[95416,[],""]
5:I[52106,["601","static/chunks/app/error-e0caef05b98c4719.js"],"default"]
6:I[68863,[],""]
7:I[27260,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
9:I[86033,[],"OutletBoundary"]
b:I[86033,[],"MetadataBoundary"]
d:I[86033,[],"ViewportBoundary"]
f:I[53347,[],""]
0:{"P":null,"b":"zg9LbphXFynatHErGkLKy","p":"","c":["","wiki","DockerCompose"],"i":false,"f":[[["",{"children":["wiki",{"children":[["slug","DockerCompose","d"],{"children":["__PAGE__?{\"slug\":\"DockerCompose\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","div",null,{"style":{"minHeight":"100vh","display":"flex","flexDirection":"column"},"children":[["$","$L3",null,{}],["$","main",null,{"style":{"flex":1},"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$5","errorStyles":[],"errorScripts":[],"template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"children":[["$","h2",null,{"children":"404 - Page Not Found"}],["$","p",null,{"children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}],["$","$L7",null,{}]]}]}]}]}]]}],{"children":["wiki",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["slug","DockerCompose","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":"$La"}]]}],{},null]},null]},null]},null],["$","$1","h",{"children":[null,["$","$1","2qufLFbb0BjidxqjSUt3Z",{"children":[["$","$Lb",null,{"children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],null]}]]}]]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:I[17767,["63","static/chunks/63-23d38985151e11d0.js","440","static/chunks/440-229a70a25e47a10b.js","607","static/chunks/app/wiki/%5Bslug%5D/page-7d21613c7cba184a.js"],"WikiContent"]
12:I[65078,["63","static/chunks/63-23d38985151e11d0.js","440","static/chunks/440-229a70a25e47a10b.js","607","static/chunks/app/wiki/%5Bslug%5D/page-7d21613c7cba184a.js"],"Comments"]
11:T5d6,* TOC
{:toc}

# Docker compose란?
- Docker compose 는여러개의 Dockerfile를포함하고 그걸 컨트롤 하는 Dockerfile의 부모격이다.
- docker compose로 세세한 각 dockerfile에 대한 셋팅을 할 수 있고 docker cli로 실행하는 동일한 방식을 스크립트로 만들어 실행 할 수 있다.

## Docker compose를학습하기 전에 알아야할 내용
- 기본적인 docker의 작동원리
- dockerfile의 작동원리
- 기본적인shell command 
- 버전 충돌에 대한 내용(원영님이 잘 정리했다.)
    * [링크](https://choewy.github.io/gitbook/issue/3)



## 초기 셋팅
- 원하는 프로젝트 이름으로 폴더를 생성
- 그안에 docker-compose.yml 생성 후 원하는 dockerfile를 다시 자식 폴더에 넣고 필요한 셋팅파일들을 구조화 하고 넣는다

```bash
- docker-compose.yml
- nginx
    - Dockerfile
    - nignx.conf
- nestserver
    - Dockerfile
    - src
- nodeserver
    - Dockerfile
    - index.js
```
> 도커 컴포즈를 구성할때는 루트 폴더에 docker-compose.yml 파일이 있고 각 하위 폴더에 각각 Dockerfile을 검색하여 하나씩 docker로 구성된다.


## 


## docker compose network
- none
- bridge
- maclan
- local


## Docker compose 기본
```docker
web:
    build: .
    ports:
        - "5000:5000"
    volumes:
        - .:/code
    links:
        - redis
redis:
    images: redis
```



## reference
- [참고 사이트](https://engineer-mole.tistory.com/221)



8:["$","main",null,{"children":["$","article",null,{"children":[["$","$L10",null,{"content":"$11","frontMatter":{"title":"Docker compose 사용법","description":"","tags":["Docker","docker-compose","네트워크","컨테이너","개발환경"],"date":"2022-05-01 16:42:28 +0900"}}],["$","$L12",null,{"slug":"DockerCompose"}]]}]}]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"}]]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Personal Storage"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
a:null
