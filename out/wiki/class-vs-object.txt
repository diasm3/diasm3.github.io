1:"$Sreact.fragment"
2:I[84551,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
3:I[44098,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
4:I[95416,[],""]
5:I[52106,["601","static/chunks/app/error-e0caef05b98c4719.js"],"default"]
6:I[68863,[],""]
7:I[27260,["63","static/chunks/63-23d38985151e11d0.js","253","static/chunks/253-6d76b5ff018f072f.js","185","static/chunks/app/layout-5a0ede7798811b0e.js"],"default"]
9:I[86033,[],"OutletBoundary"]
b:I[86033,[],"MetadataBoundary"]
d:I[86033,[],"ViewportBoundary"]
f:I[53347,[],""]
0:{"P":null,"b":"zg9LbphXFynatHErGkLKy","p":"","c":["","wiki","class-vs-object"],"i":false,"f":[[["",{"children":["wiki",{"children":[["slug","class-vs-object","d"],{"children":["__PAGE__?{\"slug\":\"class-vs-object\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","div",null,{"style":{"minHeight":"100vh","display":"flex","flexDirection":"column"},"children":[["$","$L3",null,{}],["$","main",null,{"style":{"flex":1},"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$5","errorStyles":[],"errorScripts":[],"template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"children":[["$","h2",null,{"children":"404 - Page Not Found"}],["$","p",null,{"children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}],["$","$L7",null,{}]]}]}]}]}]]}],{"children":["wiki",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["slug","class-vs-object","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":"$La"}]]}],{},null]},null]},null]},null],["$","$1","h",{"children":[null,["$","$1","yhgsQi0Mul91P2-q-9XG2",{"children":[["$","$Lb",null,{"children":"$Lc"}],["$","$Ld",null,{"children":"$Le"}],null]}]]}]]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:I[17767,["63","static/chunks/63-23d38985151e11d0.js","440","static/chunks/440-229a70a25e47a10b.js","607","static/chunks/app/wiki/%5Bslug%5D/page-7d21613c7cba184a.js"],"WikiContent"]
12:I[65078,["63","static/chunks/63-23d38985151e11d0.js","440","static/chunks/440-229a70a25e47a10b.js","607","static/chunks/app/wiki/%5Bslug%5D/page-7d21613c7cba184a.js"],"Comments"]
11:Td20,* TOC
{:toc}

# class 와 object 
- class은 틀만 만들고 (메모리에 저장안되)
- object는 틀을 가지고 실제 다양한 종류의 데이터를 저장한다

## 'use strict' in ES6
// Object-oriented programming
// class : template
// object : instance of a class
// JavaScript classes
//  - introduced in ES6
//  - syntactical sugar over prototype-based inheritance



## class
```javascript
class Person {
    // constructor
    constructor(name, age){
    //fields
    this.name = name
    this.age = age
    }

    speak(){
        console.log(`${this.name}: hello!`)
    }
}


const me = new Person('me', 20)
console.log(me.name)
console.log(me.age)
```


```javascript
//getter
//setter

class User {
    constructor(firstName, lastName, age){
        this.firstName = firstName
        this.lastName = lastName
        this.age = age // setter 에 age를 불러온다
    }
    
    get age() { 
        return this._age // 상위 prototype 에서 this.age를 계속 가져오려고 하기 떄문에
        // 그래서 _age라는 다른 변수명을 사용한다
    }
    
    set age(value) {
        this._age = value
        this._age = value < 0 ? 0 : value
    }
}  


* Fields (public, private)
```javascript
class Experiemnt{
    publicField = 2
    #privateField = 0  //class 내부에서만 값을 읽고 쓰고 할 수 있다
}

const experiment = new Experiemnt()
console.log(experiment.publicField) // 실행가능
console.log(experiment.privateField) //실행 불가능 -> undefined
```


* Static

```javascript
class Article {
    static pulisher = 'dream coding'
    constructor(articleNumber){
        this.articleNumber = articleNumber
    }
    
    static printPublisher(){
        console.log(Article.publisher)
    }
}

const aritcle1 = new Article(1)
const article2  = new Article(2)

console.log(Article.publicsher) //클래스 함수에 내장하는 함수로 인스턴스에서는 포함이 안된다
console.log(article1.printPublisher) // undefined
Article.printPublisher()
```

* inheritance 상속 

```javascript

class Shape{
    constructor(height, width, color){
        this.height = height
        this.width = width
        this.color = color
    }
    
    draw() {
        console.log(`drawing ${this.color} color of`)
    }
    getArea() {
        return width * this.height 
    
    }
}

class Rectangle extends Shape {} // Shape 에 있는 내용을 그대로 가져 올 수 있음
class Triangle extends Shape {
    draw() {
        super.draw() // 부모에 있는 내용을 그대로 져올 수 있음
        console.log('*')
    }
    getArea(){
        return (this.width * this.height) /2
    }
    
    
    toString() {
       return `Triangle color: ${this.color} ` 
    
    }

} // Shape 에 있는 내용을 그대로 가져 올 수 있음


const rectangle = new Rectangle(20, 20, 'blue')
rectangle.draw()
const triangle = new Triangle(20, 20, 'red')
```

## Class checking: instanceOf
```javascript
console.log(rectangle instanceof Rectangle)
console.log(triangle instanceof Rectangle)
console.log(triangle instanceof Triangle)
console.log(triangle instanceof Shape)
console.log(triangle instanceof Object)
cosnoel.log(triangle.toString())

```
















아까 이야기 했던것은...  객체를 비교할 수 있나?
프로토 타입에 관한 내용을 정리하자
8:["$","main",null,{"children":["$","article",null,{"children":[["$","$L10",null,{"content":"$11","frontMatter":{"title":"class & object","description":"","tags":["JavaScript","클래스","객체지향 프로그래밍","ES6","상속"],"date":"2022-04-05 11:22:35 +0900"}}],["$","$L12",null,{"slug":"class-vs-object"}]]}]}]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"}]]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Personal Storage"}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
a:null
