1:"$Sreact.fragment"
2:I[4101,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
3:I[3742,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
4:I[7960,[],""]
5:I[5625,[],""]
6:I[9946,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
8:I[8165,[],"OutletBoundary"]
a:I[8165,[],"MetadataBoundary"]
c:I[8165,[],"ViewportBoundary"]
e:I[810,[],""]
0:{"P":null,"b":"1gBIa67YwYncMlz2nwFiK","p":"","c":["","wiki","graph",""],"i":false,"f":[[["",{"children":["wiki",{"children":[["slug","graph","d"],{"children":["__PAGE__?{\"slug\":\"graph\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","div",null,{"style":{"minHeight":"100vh","display":"flex","flexDirection":"column"},"children":[["$","$L3",null,{}],["$","main",null,{"style":{"flex":1},"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"children":[["$","h2",null,{"children":"404 - Page Not Found"}],["$","p",null,{"children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}],["$","$L6",null,{}]]}]}]}]}]]}],{"children":["wiki",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["slug","graph","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",null,["$","$L8",null,{"children":"$L9"}]]}],{},null]},null]},null]},null],["$","$1","h",{"children":[null,["$","$1","8EgrJfgempXb55ZwZbVod",{"children":[["$","$La",null,{"children":"$Lb"}],["$","$Lc",null,{"children":"$Ld"}],null]}]]}]]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:I[4023,["598","static/chunks/598-b69b240bf426274b.js","848","static/chunks/848-a557251920a40253.js","607","static/chunks/app/wiki/%5Bslug%5D/page-3bb981cd3ee1ea46.js"],"WikiContent"]
10:T69f,* TOC
{:toc}

# 그래프(Graph)
## 기본개념 


### 오일러 경로
### 해밀턴 경로
### 그래프 순회
- DFS(깊이우선탐색)
- BFS(너비우선탐색)
### 백트래킹 (N-Queen)
> 백트래킹은 해결책에 대한 후보를 구축해 나아가다 가능성이 없다고 판단되는 즉시 후볼를 포기(백트랙)해 정답을 찾아가는 범용적인 알고리즘으로 제약 충족 문제에 특히 유용하다.

> leetcode 문제
> https://leetcode.com/problems/n-queens/

![image](https://user-images.githubusercontent.com/56494905/159195564-27e88352-4d69-4ea9-a660-18c68cffa969.png)

``` python
def nqueen(n):
    visited = [-1] * n # 배열을 n개 만든다 
    cnt=0 # 카운터 변수 선언

    # 범위를 벗어 났는지 확인
    def is_ok_on(nth_row):
        #
        for row in range(nth_row):
            if visited[nth_row] == visited[row] or nth_row - row == abs(visited[nth_row] - visited[row]):
                return False
        return True

    def dfs(row):
        if row >= n:
            nonlocal cnt
            cnt += 1
            grid = [['.'] * n for _ in range(n)]
            for idx, value in enumerate(visited):
                grid[idx][value] = 'Q'
            return

        for col in range(n):
            visited[row] = col
            if is_ok_on(row):
                dfs(row + 1)

    dfs(0)
    return cnt 

print(nqueen(int(input())))
```

# assert nqueen(4) == [[".Q..", "...Q", "Q...", "..Q."], ["..Q.", "Q...", "...Q", ".Q.."]]


```




### 제약 충족 문제


## 문제풀이  
### 교재 내용

### leetcode solution

## 풀면서 잘 몰랐던 부분 

## 파이썬문법 모르는 부분 

## 주석



7:["$","$Lf",null,{"content":"$10","frontMatter":{"title":"그래프(graph)","description":"$undefined","tags":["그래프","알고리즘","DFS","BFS","N-Queen"],"date":"2022-03-20 23:12:19 +0900"}}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Your Blog Title"}],["$","meta","2",{"name":"description","content":"Your blog description"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
9:null
