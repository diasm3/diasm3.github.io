1:"$Sreact.fragment"
2:I[4101,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
3:I[3742,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
4:I[7960,[],""]
5:I[5625,[],""]
6:I[9946,["598","static/chunks/598-b69b240bf426274b.js","531","static/chunks/531-a6f513f60d7f2ed6.js","185","static/chunks/app/layout-1a9ce41322de5295.js"],"default"]
8:I[8165,[],"OutletBoundary"]
a:I[8165,[],"MetadataBoundary"]
c:I[8165,[],"ViewportBoundary"]
e:I[810,[],""]
0:{"P":null,"b":"1gBIa67YwYncMlz2nwFiK","p":"","c":["","wiki","JSON-js",""],"i":false,"f":[[["",{"children":["wiki",{"children":[["slug","JSON-js","d"],{"children":["__PAGE__?{\"slug\":\"JSON-js\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[null,["$","html",null,{"lang":"ko","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","div",null,{"style":{"minHeight":"100vh","display":"flex","flexDirection":"column"},"children":[["$","$L3",null,{}],["$","main",null,{"style":{"flex":1},"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"children":[["$","h2",null,{"children":"404 - Page Not Found"}],["$","p",null,{"children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[]}]}],["$","$L6",null,{}]]}]}]}]}]]}],{"children":["wiki",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["slug","JSON-js","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","wiki","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",null,["$","$L8",null,{"children":"$L9"}]]}],{},null]},null]},null]},null],["$","$1","h",{"children":[null,["$","$1","HxGzwTKMtkiS2K0BThwRQ",{"children":[["$","$La",null,{"children":"$Lb"}],["$","$Lc",null,{"children":"$Ld"}],null]}]]}]]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:I[4023,["598","static/chunks/598-b69b240bf426274b.js","848","static/chunks/848-a557251920a40253.js","607","static/chunks/app/wiki/%5Bslug%5D/page-3bb981cd3ee1ea46.js"],"WikiContent"]
10:T836,* TOC
{:toc}

# JSON(Javascript Object Notation)  
* ECMAScript 3rd 1999
* AJAX (Asynchronous JavaScript And XML)
* XHR (XMLHttpRequest)

- 장점
    * simplest data interchange format
    * lightweight text=based structure
    * easy to read
    * key-value pairs
    * used for serialization and transmission of data between the network the network connection
    * independent programming language and platform




##  Object to JSON (Serialize)

* 간단한 예제

```javascript
// stringfy(obj)
let json = JSON.stringify(true)
console.log(json)
```

* 배열을 넣으면 "" 더블쿼트로 나온다

```javascript
let json = JSON.stringify(['appe', 'banana'])
console.log(json) //["apple", "banana"]
```

* 간단한 객체를 만들어서 넣어보자

```javascript

const rabbit = {
    name: 'tori',
    color: 'white',
    size: null,
    birthDate: new Date(),
    symbol : Symbol("id"),
    jump: () => {
       console.log(`${name} can jump`) 
    }

//
json = JSON.stringify(rabbit)
console.log(json) 
```

* 위 객체를 마음대로 변경 추가 삭제도 가능


```javascript
 
 //
json = JSON.stringify(rabbit, ['name']) //name만 출력가능
console.log(json) 

//
json = JSON.stringify(rabbit, (key, value) => {
    console.log(`key: ${key}, value: ${value}`)
    return key === `name` ? `ellie` : value

}) //출력되는 JSON 데이터 파일을 컨트롤 가능
console.log(json) 
}
```


## JSON to Object(Deserialize)

* JSON을 다시 Object로 만드는것은 `JSON.stringify()`를 이용하면 된다
* 두번째 parameter 에서 call back 함수를 넣어 원하는 데이터를 쉽게 고칠 수 있다 





```javascript
// JSON to Object
json = JSON.stringify(rabbit)
const obj = JSON.parse(json)
console.log(obj)
rabbit.jump()
obj jump() //함수는 포함이 되지 않음 


console.log(rabbit.birthDate.getDate())
console.log(obj.brithDate) // string으로 할당
//

//revivor
const obj = JSON.parse(json, (key, value)=>{
    console.log(`key: ${key}, value: ${value}`)
    return key === 'birthDate' ? new Date(value) : value
})
console.log(obj)

```



7:["$","$Lf",null,{"content":"$10","frontMatter":{"title":"JSON 사용법","description":"$undefined","tags":["JSON","ECMAScript","AJAX","data interchange","serialization"],"date":"2022-04-05 20:45:05 +0900"}}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Your Blog Title"}],["$","meta","2",{"name":"description","content":"Your blog description"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
9:null
